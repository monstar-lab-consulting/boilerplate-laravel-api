version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-ecs: circleci/aws-ecs@2.1.0

references:
  php_environment: &php_environment
    environment:
      APP_URL: http://localhost
      APP_ENV: testing
      APP_DEBUG: true
      APP_KEY: base64:hA7ZAU1am16HSOWo2a4SCTVmByyOQBj9X0KV4JucuD4=
      DB_DATABASE: boilerplate
      DB_USERNAME: boilerplate
      DB_PASSWORD: password
  primary_container: &primary_container
    docker:
      - image: circleci/php:8.0-node-browsers-legacy
    working_directory: ~/boilerplate

  test_and_build_container: &test_and_build_container
    docker:
      - image: circleci/php:8.0-node-browsers-legacy
        <<: *php_environment
      - image: circleci/mysql:8.0.23
        environment:
          MYSQL_DATABASE: boilerplate
          MYSQL_USER: boilerplate
          MYSQL_PASSWORD: password
          MYSQL_ROOT_PASSWORD: password
    working_directory: ~/boilerplate

  setup_specific_docker: &setup_specific_docker
    setup_remote_docker:
      version: 18.09.3
  # composer cache
  # restore dependencies cache
  restore_composer_dependencies_cache: &restore_composer_dependencies_cache
    restore_cache:
      key: v1-dependencies-{{ checksum "composer.json" }}-{{ checksum "composer.lock" }}

  # save dependencies cache
  save_composer_dependencies_cache: &save_composer_dependencies_cache
    save_cache:
      key: v1-dependencies-{{ checksum "composer.json" }}-{{ checksum "composer.lock" }}
      paths:
        - vendor

  # security-checker cache
  # restore security checker
  restore_composer_security_checker: &restore_composer_security_checker
    restore_cache:
      key: v1-security-checker
  # save security checker
  save_composer_security_checker: &save_composer_security_checker
    save_cache:
      key: v1-security-checker
      paths:
        - security-checker
  # checking composer dependencies security
  checking_composer_dependencies_security: &checking_composer_dependencies_security
    run:
      name: Security
      command: |
        set -x
          if [[ ! -f local-php-security-checker ]]; then
            curl -L https://github.com/fabpot/local-php-security-checker/releases/download/v1.0.0/local-php-security-checker_1.0.0_linux_386 --output local-php-security-checker
          fi
        chmod +x local-php-security-checker
        ./local-php-security-checker
        echo "TODO: Checking dependencies security"

  # prepare the database
  prepare_db: &prepare_db
    run:
      name: Install config & database
      command: |
        set -x
        sudo apt-get update -y
        sudo apt-get install -y libpq-dev
        sudo docker-php-ext-install pdo pdo_mysql
        composer dump-autoload -o
        php artisan config:cache
        php artisan migrate --seed

jobs:
  test_and_build:
    <<: *test_and_build_container
    steps:
      - checkout
      - <<: *setup_specific_docker
      - run: cp environments/.env.testing .env
      - <<: *restore_composer_dependencies_cache
      - run:
          name: Install dependencies
          command: |
            set -x
            if [[ ! -d vendor ]]; then
              sudo docker-php-ext-install sockets
              sudo composer self-update --2
              composer install --no-interaction --no-progress --prefer-dist --optimize-autoloader --ignore-platform-reqs
            fi
      - <<: *save_composer_dependencies_cache
      - run:
          name: Test phplint
          command: |
            set -x
            ./vendor/bin/phplint ./ --exclude=vendor
            echo "TODO: Run phplint"
      - run:
          name: Test phpmd
          command: |
            set -x
            ./vendor/bin/phpmd core text phpmd.xml
            echo "TODO: Run phpmd"
      - run:
          name: Test phpcs
          command: |
            set -x
            ./vendor/bin/phpcs --standard=phpcs.xml --extensions=php --exclude=Generic.Files.LineLength --ignore=core/Support/helpers.php core
            echo "TODO: Run phpcs"
      - <<: *restore_composer_security_checker
      - <<: *checking_composer_dependencies_security
      - <<: *save_composer_security_checker
      - <<: *prepare_db
workflows:
  version: 2
  boilerplate_workflow:
    jobs:
      - test_and_build:
          filters:
            branches:
              ignore:
                - master
            tags:
              ignore:
                - /.*/
      
      - aws-ecr/build-and-push-image:
              name: 'stg-build-and-push-base-image'
              filters:
                branches:
                  only:
                    - staging-base
              requires:
                - test_and_build
              account-url: AWS_ECR_ACCOUNT_URL
              aws-access-key-id: AWS_ACCESS_KEY_ID
              aws-secret-access-key: AWS_SECRET_ACCESS_KEY
              dockerfile: ./dockers/Base.Dockerfile
              path: .
              region: AWS_REGION
              repo: 'AWS_ECR_STG'
              tag: "base"
      
      - aws-ecr/build-and-push-image:
              name: 'prod-build-and-push-base-image'
              filters:
                branches:
                  only:
                    - production-base
              requires:
                - test_and_build
              account-url: AWS_ECR_ACCOUNT_URL
              aws-access-key-id: AWS_ACCESS_KEY_ID
              aws-secret-access-key: AWS_SECRET_ACCESS_KEY
              dockerfile: ./dockers/Base.Dockerfile
              path: .
              region: AWS_REGION
              repo: 'AWS_ECR_PROD'
              tag: "base"

      - aws-ecr/build-and-push-image:
              name: 'stg-build-and-push'
              filters:
                branches:
                  only:
                    - staging
                    - staging-debug
              requires:
                - test_and_build
              account-url: AWS_ECR_ACCOUNT_URL
              aws-access-key-id: AWS_ACCESS_KEY_ID
              aws-secret-access-key: AWS_SECRET_ACCESS_KEY
              dockerfile: ./dockers/Dockerfile
              path: .
              extra-build-args: '--build-arg IMAGE_NAME=${AWS_ECR_ACCOUNT_URL}/${AWS_ECR_STG} --build-arg BASE_TAG=base --build-arg PORT=80'
              region: AWS_REGION
              repo: 'AWS_ECR_STG'
              tag: "$CIRCLE_SHA1"

      - are-you-sure-prod:
              type: approval
              requires:
                - test_and_build
              filters:
                branches:
                  only:
                    - production

      - aws-ecr/build-and-push-image:
              name: 'prod-build-and-push'
              filters:
                branches:
                  only:
                    - production
              requires:
                - are-you-sure-prod
              account-url: AWS_ECR_ACCOUNT_URL
              aws-access-key-id: AWS_ACCESS_KEY_ID
              aws-secret-access-key: AWS_SECRET_ACCESS_KEY
              dockerfile: ./dockers/Dockerfile
              extra-build-args: '--build-arg IMAGE_NAME=${AWS_ECR_ACCOUNT_URL}/${AWS_ECR_PROD} --build-arg BASE_TAG=base --build-arg PORT=80'
              path: .
              region: AWS_REGION
              repo: 'AWS_ECR_PROD'
              tag: "$CIRCLE_SHA1"
      
      - aws-ecs/deploy-service-update:
          name: 'stg-service-update'
          filters:
            branches:
              only:
                - staging
                - staging-debug
          requires:
            - stg-build-and-push
          aws-region: AWS_REGION
          cluster-name: 'AWS_CLUSTER_STG'
          force-new-deployment: true
          container-image-name-updates: 'container=container,tag=$CIRCLE_SHA1'
          service-name: 'AWS_SERVICE_STG'
          family: 'AWS_TASK_STG'

      - are-you-sure-update-prd-service:
          type: approval
          filters:
            branches:
              only:
                - production
          requires:
            - prod-build-and-push

      - aws-ecs/deploy-service-update:
          name: 'prod-service-update'
          filters:
            branches:
              only:
                - production
          requires:
            - are-you-sure-update-prd-service
          aws-region: AWS_REGION
          cluster-name: 'AWS_CLUSTER_PROD'
          force-new-deployment: true
          container-image-name-updates: 'container=container,tag=$CIRCLE_SHA1'
          service-name: 'AWS_SERVICE_PROD'
          family: 'AWS_TASK_PROD'

version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.13

references:
  php_environment: &php_environment
    environment:
      APP_URL: http://localhost
      APP_ENV: testing
      APP_DEBUG: true
      APP_KEY: base64:hA7ZAU1am16HSOWo2a4SCTVmByyOQBj9X0KV4JucuD4=
      DB_DATABASE: forge
      DB_USERNAME: forge
      DB_PASSWORD: forge
  primary_container: &primary_container
    docker:
      - image: circleci/php:8.0-node-browsers-legacy
    working_directory: ~/boilerplate

  test_and_build_container: &test_and_build_container
    docker:
      - image: circleci/php:8.0-node-browsers-legacy
        <<: *php_environment
      - image: postgres:11.5
        environment:
          POSTGRES_DB: forge
          POSTGRES_USER: forge
          POSTGRES_PASSWORD: forge
          TZ: Asia/Tokyo
    working_directory: ~/boilerplate

  deploy_to_aws: &deploy_to_aws
    deploy:
      name: Deploy to AWS
      environment:
        ECS_CLI_VER: v1.16.0
      command: |
        set -x
        [[ -f "aws-envs.sh" ]] && source aws-envs.sh
        ./ops/deploy.sh
      no_output_timeout: 30m

  setup_specific_docker: &setup_specific_docker
    setup_remote_docker:
      version: 18.09.3

  # handle docker images
  operate_docker_image: &operate_docker_image
    run:
      name: Operate Docker image
      command: |
        set -x

        [[ -f "aws-envs.sh" ]] && source aws-envs.sh
        ./ops/push.sh
  # composer cache
  # restore dependencies cache
  restore_composer_dependencies_cache: &restore_composer_dependencies_cache
    restore_cache:
      key: v1-dependencies-{{ checksum "composer.json" }}-{{ checksum "composer.lock" }}

  # save dependencies cache
  save_composer_dependencies_cache: &save_composer_dependencies_cache
    save_cache:
      key: v1-dependencies-{{ checksum "composer.json" }}-{{ checksum "composer.lock" }}
      paths:
        - vendor

  # node cache
  # restore dependencies cache
  restore_node_dependencies_cache: &restore_node_dependencies_cache
    restore_cache:
      key: v1-dependencies-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}

  # save dependencies cache
  save_node_dependencies_cache: &save_node_dependencies_cache
    save_cache:
      key: v1-dependencies-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      paths:
        - node_modules

  # security-checker cache
  # restore security checker
  restore_composer_security_checker: &restore_composer_security_checker
    restore_cache:
      key: v1-security-checker
  # save security checker
  save_composer_security_checker: &save_composer_security_checker
    save_cache:
      key: v1-security-checker
      paths:
        - security-checker
  # checking composer dependencies security
  checking_composer_dependencies_security: &checking_composer_dependencies_security
    run:
      name: Security
      command: |
        set -x
          if [[ ! -f local-php-security-checker ]]; then
            curl -L https://github.com/fabpot/local-php-security-checker/releases/download/v1.0.0/local-php-security-checker_1.0.0_linux_386 --output local-php-security-checker
          fi
        chmod +x local-php-security-checker
        ./local-php-security-checker
        echo "TODO: Checking dependencies security"

  # prepare the database
  prepare_db: &prepare_db
    run:
      name: Install config & database
      command: |
        set -x
        sudo apt-get update -y
        sudo apt-get install -y libpq-dev
        sudo docker-php-ext-install pdo pdo_pgsql
        composer dump-autoload -o
        php artisan config:cache
        php artisan migrate --seed

  install_aws_cli: &install_aws_cli
    run:
      name: Install AWS CLI
      environment:
        AWS_CLI_VER: 1.16.297
      command: |
        set -x
        sudo apt-get update -y
        sudo apt-get install -y python-pip
        sudo pip install awscli=="${AWS_CLI_VER}"

  assume_role_and_save_credentials: &assume_role_and_save_credentials
    run:
      name: Assume role and save credentials
      command: |
        set -x

        ./ops/assume.sh

jobs:
  test_and_build:
    <<: *test_and_build_container
    steps:
      - checkout
      - <<: *setup_specific_docker
      - run: cp environments/.env.testing .env
      - <<: *restore_composer_dependencies_cache
      - <<: *restore_node_dependencies_cache
      - run:
          name: Install dependencies
          command: |
            set -x
            if [[ ! -d vendor ]]; then
              sudo docker-php-ext-install sockets
              sudo composer self-update --2
              composer install --no-interaction --no-progress --prefer-dist --optimize-autoloader --ignore-platform-reqs
            fi
            if [[ ! -d node_modules ]]; then
              npm install
            fi
      - <<: *save_composer_dependencies_cache
      - <<: *save_node_dependencies_cache
      - run:
          name: Test phplint
          command: |
            set -x
            ./vendor/bin/phplint ./ --exclude=vendor
            echo "TODO: Run phplint"
      - run:
          name: Test phpmd
          command: |
            set -x
            ./vendor/bin/phpmd app text phpmd.xml
            echo "TODO: Run phpmd"
      - run:
          name: Test phpcs
          command: |
            set -x
            ./vendor/bin/phpcs --standard=phpcs.xml --extensions=php --exclude=Generic.Files.LineLength --ignore=app/Support/helpers.php app
            echo "TODO: Run phpcs"
      - run:
          name: Test npmlint
          command: |
            set -x
            npm run lint
            echo "TODO: Run npmlint"
      - <<: *restore_composer_security_checker
      - <<: *checking_composer_dependencies_security
      - <<: *save_composer_security_checker
      - <<: *prepare_db
      - run:
          name: Test unit
          command: |
            set -x
            ./vendor/bin/phpunit
            echo "TODO: do unit testing here"
      - store_test_results:
          path: tests/_output
      - store_artifacts:
          path: tests/_output
      # - <<: *operate_docker_image

  deploy:
    parameters:
      production:
        type: boolean
        default: false
    <<: *primary_container
    steps:
      - checkout
      - <<: *setup_specific_docker
      - <<: *restore_composer_security_checker
      - run:
          name: Install dependencies
          command: |
            set -x
            if [[ ! -d vendor ]]; then
              sudo docker-php-ext-install sockets
              composer install --no-interaction --no-progress --prefer-dist --optimize-autoloader --ignore-platform-reqs
            fi
      - <<: *save_composer_dependencies_cache
      - <<: *install_aws_cli
      - when:
          condition: <<parameters.production>>
          steps:
            - run:
                name: Assume role and save credentials for production
                command: |
                  set -x

                  ./ops/assume.sh -p
      - unless:
          condition: <<parameters.production>>
          steps:
            - <<: *assume_role_and_save_credentials
      - <<: *operate_docker_image
      - <<: *deploy_to_aws

workflows:
  version: 2
  boilerplate_workflow:
    jobs:
      - test_and_build:
          filters:
            branches:
              ignore:
                - master
            tags:
              ignore:
                - /.*/
      - deploy:
          name: deploy_on_dev
          requires:
            - test_and_build
          filters:
            branches:
              only:
                - /^feature\/sprint(\d+)$/
              ignore:
                - /.*/
            tags:
              only:
                - /v([0-9]+\.){2}[0-9]+/
      - deploy:
          name: deploy_on_stg
          filters:
            branches:
              only:
                - /develop/
              ignore:
                - /.*/
            tags:
              only:
                - /v([0-9]+\.){2}[0-9]+/
      - approve_deploying_to_prd:
          type: approval
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /v([0-9]+\.){2}[0-9]+/
      - deploy:
          name: deploy_on_prd
          production: true
          requires:
            - approve_deploying_to_prd
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /v([0-9]+\.){2}[0-9]+/
